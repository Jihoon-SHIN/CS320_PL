#lang plai
;20150441 Jihoon,Shin

;#1
; area-square : number -> number
; to compute the area of a square
; (area-square 5) should produce 25
(define (area-square x)
  (if (> x 0)
      (* x x)
      (error 'area-square "bad syntax:" x)))

(test (area-square 5) 25)

;#2
; voulume-cuboid : number number number -> number
; to compute the volume of a cube
; (volume-cuboid 2 3 4) should produce 24

(define (volume-cuboid x y z)
  (if (and (> x 0) (> y 0) (> z 0))
           (* x y z)
           (error 'volume-coboid "bad syntax:" x y z)))

(test (volume-cuboid 2 3 4) 24)

;#3
; is-multiple-of? : number number -> boolean
; to check that a is the multiple of the b
; (is-multiple-of? 4 2) should produce #t
; (is-multiple-of? 5 3) should produce #f

(define (is-multiple-of? a b)
  (= 0 (remainder a b)))

(test (is-multiple-of? 4 2) #t)
(test (is-multiple-of? 5 3) #f)

;#4
; factorial : number -> number
; to compute factorial of input.
; (factorial 5) should produce 120

(define (factorial x)
  (if (>= x 0)
      (cond ((= x 0) 1)
            (else (* x (factorial (- x 1)))))
      (error 'factorial "bad syntax:" x)))

(test (factorial 5) 120)

;#5
; fibonacci : number -> number
; to compute the n-th fibonacci number
; (fibonacci 5) should produce 8
(define (fibonacci n)
  (cond ((< n 0) (error 'fibonacci "bad syntax:" n))
        ((= n 1) 1)
        ((= n 2) 1)
        (else (+ (fibonacci (- n 1)) (fibonacci (- n 2))))))


;#6
; COURSE : to make a COURSE-type
; to make the type that COURSE
; (cs330 5 10) should produce (cs330 5 10)
; (cs320-quiz c320) should produce 5
(define-type COURSE
  [CS320 (quiz number?)
         (homework number?)]
  [CS311 (homework number?)]
  [CS330 (projects number?)
         (homework number?)])

(test (CS330 5 10) (CS330 5 10))
(define c320 (CS320 5 7))
(define c311 (CS311 3))
(define c330 (CS330 3 4))
(test (CS320-quiz c320) 5)

;#7
; total-assignments : type COURSE -> number
; to compute the total number of quizzes, homework and projects for the given course
; (total-assignments c320) should produce 12
(define (total-assignments g)
  (type-case COURSE g
    [CS320 (q h) (+ q h)]
    [CS311 (h) h]
    [CS330 (p h) (+ p h)]))

(test (total-assignments c320) 12)

;#8
; total-homework : list -> number
; to compute the total number of homework of the courses in the given list
; (define c320 (cs320 5 7)) , (define c311 (cs311 3)), (define c330 (cs330 3 4))
; (total-homework (list c320 c311 c330)) should produce 14
(define (total-homework list)
  (cond ((null? list) 0)
        ((CS320? (car list)) (+ (CS320-homework (car list)) (total-homework (cdr list))))
        ((CS330? (car list)) (+ (CS330-homework (car list)) (total-homework (cdr list))))
        ((CS311? (car list)) (+ (CS311-homework (car list)) (total-homework (cdr list))))))

(define lst (list c320 c311 c330))
(test (total-homework lst) 14)

;#9
; my-map : function list -> list
; to produce a list of numbers generated by applying the input function to each elment of list
; (my-map (lambda (x) (+ 1 x)) (cons 1 (cons 2 (cons 3 empty))))) should produce '(2 3 4)

(define (my-map f l)
  (if (null? l)
      empty
      (cons (f (car l)) (my-map f (cdr l)))))
      
(test (my-map (lambda (x) (+ 1 x)) (cons 1 (cons 2 (cons 3 empty)))) '(2 3 4))

;#10
; my-filter : function list -> list
; to produce a list consiting of the elements of list that satisfy the predicate of f.
; (my-filter (lambda (x) (> x 1)) (cons 3 (cons 1 (cons 2 empty))))) should produce '(3 2)
 
(define (my-filter f l)
  (cond ((null? l) empty)
        ((f (car l)) (cons (car l) (my-filter f (cdr l))))
        (else (my-filter f (cdr l)))))

(test (my-filter (lambda (x) (> x 1)) (cons 3 (cons 1 (cons 2 empty)))) '(3 2))

;;; --------------------------------------------------------------------
;;; Question 1 (10)

(test (area-square 1) 1)
(test (area-square 2) 4)
(test (area-square 3) 9)
(test (area-square 4) 16)
(test (area-square 5) 25)
(test (area-square 11) 121)
(test (area-square 35) 1225)
(test (area-square 2483) 6165289)
(test (area-square 10000) 100000000)
(test (area-square 99999) 9999800001)

;;; --------------------------------------------------------------------
;;; Question 2 (10)

(test (volume-cuboid 1 5 1) 5)
(test (volume-cuboid 2 4 3) 24)
(test (volume-cuboid 3 4 4) 48)
(test (volume-cuboid 4 3 5) 60)
(test (volume-cuboid 5 8 2) 80)
(test (volume-cuboid 3 3 3) 27)
(test (volume-cuboid 11 12 13) 1716)
(test (volume-cuboid 23 24 25) 13800)
(test (volume-cuboid 45 12 85) 45900)
(test (volume-cuboid 50 50 50) 125000)


;;; --------------------------------------------------------------------
;;; Question 3 (10)

(test (is-multiple-of? 44 3) #f)
(test (is-multiple-of? 33 3) #t)
(test (is-multiple-of? 1 7) #f)
(test (is-multiple-of? 0 10) #t)
(test (is-multiple-of? -121 11) #t)
(test (is-multiple-of? 33 12) #f)
(test (is-multiple-of? 60 -12) #t)
(test (is-multiple-of? -78 78) #t)
(test (is-multiple-of? 1001 11) #t)
(test (is-multiple-of? 999 9) #t)


;;; --------------------------------------------------------------------
;;; Question 4 (10)

(test (factorial 1) 1)
(test (factorial 2) 2)
(test (factorial 3) 6)
(test (factorial 4) 24)
(test (factorial 5) 120)
(test (factorial 6) 720)
(test (factorial 7) 5040)
(test (factorial 8) 40320)
(test (factorial 9) 362880)
(test (factorial 11) 39916800)

;;; --------------------------------------------------------------------
;;; Question 5 (10)

(test (fibonacci 1) 1)
(test (fibonacci 2) 1)
(test (fibonacci 3) 2)
(test (fibonacci 4) 3)
(test (fibonacci 5) 5)
(test (fibonacci 10) 55)
(test (fibonacci 15) 610)
(test (fibonacci 20) 6765)
(test (fibonacci 21) 10946)
(test (fibonacci 22) 17711)


;;; Question 6 (10)
(test (COURSE? (CS320 1 1)) #t)
(test (CS320-quiz (CS320 2 2)) 2)
(test (CS320-homework (CS320 4 4)) 4)
(test (COURSE? (CS311 4)) #t)
(test (CS311-homework (CS311 7)) 7)
(test (COURSE? (CS330 7 4)) #t)
(test (CS330-projects (CS330 2 2)) 2)
(test (CS330-homework (CS330 6 6)) 6)
(test (COURSE? (CS320 1 3)) #t)
(test (COURSE? (CS330 7 0)) #t)

;;; Question 7 (10)
(test (total-assignments (CS320 3 8)) 11)
(test (total-assignments (CS311 9)) 9)
(test (total-assignments (CS330 1 8)) 9)
(test (total-assignments (CS320 1 9)) 10)
(test (total-assignments (CS311 20)) 20)
(test (total-assignments (CS330 3 11)) 14)
(test (total-assignments (CS320 0 3)) 3)
(test (total-assignments (CS311 12)) 12)
(test (total-assignments (CS330 3 2)) 5)
(test (total-assignments (CS330 7 2)) 9)


;;; Question 8 (10)
(test (total-homework (list)) 0)
(test (total-homework (list (CS320 2 8))) 8)
(test (total-homework (list (CS311 1))) 1)
(test (total-homework (list (CS330 3 3))) 3)
(test (total-homework (list (CS320 3 3) (CS311 1))) 4)
(test (total-homework (list (CS320 2 2) (CS311 6) (CS330 3 3))) 11)
(test (total-homework (list (CS320 3 3) (CS320 3 3) (CS320 1 1) (CS320 1 1) (CS320 1 1))) 9)
(test (total-homework (list (CS320 5 5) (CS320 2 2) (CS320 2 2) (CS320 2 2) (CS320 2 2))) 13)
(test (total-homework (list (CS330 0 0) (CS330 1 1) (CS311 6) (CS320 1 1) (CS320 1 1))) 9)
(test (total-homework (list (CS330 0 0) (CS330 0 0) (CS330 0 0) (CS330 0 0) (CS330 0 0))) 0)

;;; Question 9 (10)
(test (my-map (lambda (number) (+ 1 number)) '()) '())
(test (my-map (lambda (number) (* 1 number)) '(1 2 3 4)) '(1 2 3 4))
(test (my-map (lambda (number) (+ 3 number)) '(4)) '(7))
(test (my-map (lambda (number) (- 4 number)) '()) '())
(test (my-map (lambda (number) (- 8 number)) '(1 2 3 4)) '(7 6 5 4))
(test (my-map (lambda (number) (* number number)) '()) '())
(test (my-map (lambda (number) (* number number)) '(9)) '(81))
(test (my-map (lambda (number) (* number number)) '(2 1 0 -1)) '(4 1 0 1))
(test (my-map (lambda (number) (* 0 number)) '(3 1 2)) '(0 0 0))
(test (my-map (lambda (number) number) '(1 2 3)) '(1 2 3))

;;; Question 10 (10)
(test (my-filter (lambda (x) (> x 1)) '()) '())
(test (my-filter (lambda (x) (> x 2)) '(3 2 1)) '(3))
(test (my-filter (lambda (x) (> x 1)) '(2 3 1 3 2)) '(2 3 3 2))
(test (my-filter (lambda (x) (and (> x 1) (< x 4))) '(4 3 2 1 2 3 4)) '(3 2 2 3))
(test (my-filter (lambda (x) true) '(3 2 1 2 3)) '(3 2 1 2 3))
(test (my-filter (lambda (x) true) '()) '())
(test (my-filter (lambda (x) false) '(3 2 1 2 3)) '())
(test (my-filter (lambda (x) false) '()) '())
(test (my-filter (lambda (x) (< x 10)) '(10 5 1 5 10 15 20)) '(5 1 5))
(test (my-filter (lambda (x) (> x 6)) '(11 1 2 3 4 5 6 7 8 9 10)) '(11 7 8 9 10))